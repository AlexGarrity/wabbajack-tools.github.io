@page "/modlist/{machineUrl}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.Gallery
@using Wabbajack.Web.Utils
@inject IStateContainer _stateContainer;
@inject NavigationManager _navigationManager;
@inject HttpClient _client;

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Large">
    <MudButton Class="mb-4" Size="Size.Large" Variant="Variant.Text" Link="@Gallery.Route"
               StartIcon="@Icons.Material.Filled.ArrowBack">
        Back to the Gallery
    </MudButton>

    @if (_modlist == null)
    {
        @if (ErrorMachineUrlNull)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                <MudText>MachineUrl is null!</MudText>
            </MudAlert>
        } else if (_errorLoadingModlists)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                <MudText>Unable to load Modlists from GitHub!</MudText>
            </MudAlert>
        } else if (_errorNoMatchingModlist)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                <MudText>Found no Modlist with machineUrl "@MachineUrl"!</MudText>
            </MudAlert>
        }
        else
        {
            <MudText>Loading...</MudText>
        }
    }
    else
    {
        <img src="@_modlist.Links.ImageUri"
             alt="Image of the Modlist @_modlist.Title"
             style="width: 100%; height: auto"
             loading="eager"
             crossorigin="anonymous"/>
        <MudText Typo="Typo.caption">Created by @_modlist.Author, current Version: @_modlist.Version</MudText>
        <MudMarkdown Value="@_readme"/>
    }

</MudContainer>

@code {
    [Parameter]
    public string MachineUrl { get; set; }

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private ModlistMetadata _modlist;
    private string _readme;

    private bool ErrorMachineUrlNull => MachineUrl == null;
    private bool _errorLoadingModlists;
    private bool _errorNoMatchingModlist;

    protected override async Task OnInitializedAsync()
    {
        if (MachineUrl == null) return;

        if (!_stateContainer.Modlists.Any())
        {
            var res = await _stateContainer.LoadModlistMetadata();

            if (!res)
            {
                _errorLoadingModlists = true;
                _shouldRender = true;
                return;
            }
        }

        if (!_stateContainer.TryGetModlistMetadata(MachineUrl, out var modlist))
        {
            _errorNoMatchingModlist = true;
            _shouldRender = true;
            return;
        }

        _modlist = modlist;

        if (!LinkUtils.CanRenderReadme(_modlist.Links.Readme))
        {
            _navigationManager.NavigateTo(modlist.Links.Readme);
            return;
        }

        _readme = await _client.GetStringAsync(_modlist.Links.Readme);
        _shouldRender = true;
    }

    public static string CreateRedirect(string machineUrl) => $"/modlist/{machineUrl}";
}
