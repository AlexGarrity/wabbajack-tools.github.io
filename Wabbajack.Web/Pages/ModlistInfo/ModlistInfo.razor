@page "/modlist/{machineUrl}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Utils
@inject IStateContainer _stateContainer;
@inject NavigationManager _navigationManager;
@inject HttpClient _client;

<div>
    <!-- TODO: back button -->

    @if (_modlist == null)
    {
        @if (ErrorMachineUrlNull)
        {
            @ErrorComponent.RenderError("machineUrl is null!")
        }
        else if (_errorLoadingModlists)
        {
            @ErrorComponent.RenderError("Unable to load Modlists from GitHub!")
        }
        else if (_errorNoMatchingModlist)
        {
            @ErrorComponent.RenderError($"Found no matching Modlist for machineUrl {MachineUrl}")
        }
        else
        {
            // TODO: loading
        }
    }
    else
    {
        <div>
            <img src="@_modlist.Links.ImageUri"
                 alt="Image of the Modlist @_modlist.Title"
                 class="max-w-full"
                 loading="eager"
                 crossorigin="anonymous"/>
            <div class="pt-6 max-w-prose mx-auto">
                <p>Created by @_modlist.Author, current Version: @_modlist.Version</p>
                <div class="markdown-body" style="color: white !important;">
                    @_renderReadme(_readme)
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string MachineUrl { get; set; }

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private ModlistMetadata _modlist;
    private string _readme;

    private bool ErrorMachineUrlNull => MachineUrl == null;
    private bool _errorLoadingModlists;
    private bool _errorNoMatchingModlist;

    protected override async Task OnInitializedAsync()
    {
        if (MachineUrl == null) return;

        if (!_stateContainer.Modlists.Any())
        {
            var res = await _stateContainer.LoadModlistMetadata();

            if (!res)
            {
                _errorLoadingModlists = true;
                _shouldRender = true;
                return;
            }
        }

        if (!_stateContainer.TryGetModlistMetadata(MachineUrl, out var modlist))
        {
            _errorNoMatchingModlist = true;
            _shouldRender = true;
            return;
        }

        _modlist = modlist;

        if (!LinkUtils.CanRenderReadme(_modlist.Links.Readme))
        {
            _navigationManager.NavigateTo(modlist.Links.Readme);
            return;
        }

        _readme = await _client.GetStringAsync(_modlist.Links.Readme);
        _shouldRender = true;
    }

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private readonly RenderFragment<string> _renderReadme = readme => __builder =>
    {
        __builder.AddContent(0, MarkdownUtils.MarkdownToMarkupString(readme));
    };

    public static string CreateRedirect(string machineUrl) => $"/modlist/{machineUrl}";
}
