@page "/status/{machineUrl}"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs.ServerResponses
@using Wabbajack.DTOs.ModListValidation
@using Wabbajack.DTOs
@inject IStateContainer _stateContainer;

<div class="px-1 md:p-16 md:pb-6">
    @if (_modlistStatus == null)
    {
        @if (_errorFoundNoMatchingModlist)
        {
            @ErrorComponent.RenderError($"Found no Modlist with machineUrl {MachineUrl}")
        }
        else
        {
            @LoadingComponent.RenderLoadingThing("Loading Modlist...")
        }
    }
    else
    {
        <div>
            <p class="mb-1 font-bold text-xl">@_modlistStatus.Name</p>

            <p class="mb-2 font-medium text-lg">Failing Archives (@FailingArchives.Count.ToString())</p>
            <div style="height: @FailingArchivesHeight; overflow-y: scroll">
                <Virtualize Items="FailingArchives" Context="archive" TItem="Archive">
                    <p @key="archive.Name" class="font-light">@archive.Name</p>
                </Virtualize>
            </div>

            <p class="mt-3 mb-2 font-medium text-lg">Succeeding Archives (@SucceedingArchives.Count.ToString())</p>
            <div style="height: @SucceedingArchivesHeight; overflow-y: scroll">
                <Virtualize Items="SucceedingArchives" Context="archive" TItem="Archive">
                    <p @key="archive.Name" class="font-light">@archive.Name</p>
                </Virtualize>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string MachineUrl { get; set; }

    private const int ItemSize = 24;
    private const int MaxItemListSize = 400;
    private const int MaxItems = MaxItemListSize / ItemSize;

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private ValidatedModList _modlistStatus;
    private List<Archive> FailingArchives => _modlistStatus.Archives.Where(x => x.Status == ArchiveStatus.InValid).Select(x => x.Original).ToList();
    private List<Archive> SucceedingArchives => _modlistStatus.Archives.Where(x => x.Status != ArchiveStatus.InValid).Select(x => x.Original).ToList();

    private string FailingArchivesHeight => $"{(Math.Min(FailingArchives.Count, MaxItems) * ItemSize).ToString()}px";
    private string SucceedingArchivesHeight => $"{(Math.Min(SucceedingArchives.Count, MaxItems) * ItemSize).ToString()}px";

    private bool _errorFoundNoMatchingModlist;

    protected override async Task OnInitializedAsync()
    {
        if (MachineUrl == null) return;

        if (!_stateContainer.TryGetModlistStatus(MachineUrl, out _modlistStatus))
        {
            var res = await _stateContainer.LoadModlistStatus(MachineUrl);

            if (res == null)
            {
                _errorFoundNoMatchingModlist = true;
                _shouldRender = true;
                return;
            }

            _modlistStatus = res;
        }

        _shouldRender = true;
    }

    public static string CreateRedirect(string machineUrl) => $"/status/{machineUrl}";
}
