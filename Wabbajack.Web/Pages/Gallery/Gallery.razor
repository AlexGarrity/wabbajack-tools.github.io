@page "/gallery"
@using Wabbajack.Web.Services
@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.ModlistArchiveSearch
@using Wabbajack.Web.Pages.ModlistInfo
@using Wabbajack.Web.Utils
@inject IStateContainer _stateContainer;
@inject GalleryState _galleryState;

<PageTitle>Gallery | Wabbajack</PageTitle>

<div class="px-1 md:p-16">
    <p class="font-semibold my-1 text-4xl text-center">Gallery</p>

    <div class="mb-3 flex flex-wrap items-end justify-end md:gap-4">
        <label for="show-nsfw" class="w-full md:w-auto font-semibold text-lg inline-flex items-center mt-1">
            Show NSFW:
            <input @bind="_galleryState.ShowNsfw" id="show-nsfw" type="checkbox" class="ml-2 h-5 w-5"/>
        </label>

        <div class="w-full md:w-auto">
            <label for="select-game" class="font-semibold text-lg">Select Game:</label>
            <select @bind="_galleryState.SelectedGame" id="select-game" class="w-full p-2 text-black-900 bg-white rounded-md">
                <option value="@GalleryState.All">@GalleryState.All</option>

                @foreach (var game in AllGames)
                {
                    <option value="@game">@game</option>
                }
            </select>
        </div>
    </div>

    @if (_errorLoadingModlists)
    {
        @ErrorComponent.RenderError("Unable to load Modlists from Github!")
    } else if (!Modlists.Any())
    {
        @LoadingComponent.RenderLoadingThing("Loading Modlists...")
    }
    else
    {
        <div class="grid gap-4 grid-cols-1 md:grid-cols-2 xl:grid-cols-3 3xl:grid-cols-4 items-start">
            @foreach (var modlist in FilteredModlists)
            {
                <div @key="modlist.Title" class="bg-black-700 rounded-md shadow-md">
                    @_renderModlistInfo(modlist)
                </div>
            }
        </div>
    }
</div>

@code {
    public const string Route = "/gallery";

    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private IEnumerable<ModlistMetadata> Modlists => _stateContainer.Modlists;
    private IEnumerable<ModlistMetadata> FilteredModlists => Modlists
        .Where(x => _galleryState.ShowNsfw || !x.NSFW)
        .Where(x =>
        {
            if (_galleryState.SelectedGame == GalleryState.All) return true;
            return x.Game == _gamesByName[_galleryState.SelectedGame];
        });

    private Dictionary<string, Game> _gamesByName = new();
    private IEnumerable<string> AllGames => _gamesByName
        .Select(x => x.Key)
        .OrderBy(x => x, StringComparer.OrdinalIgnoreCase);

    private bool _errorLoadingModlists;

    protected override async Task OnInitializedAsync()
    {
        _galleryState.GetValuesFromQueryString();
        _galleryState.UpdateQueryString();

        if (!_stateContainer.Modlists.Any())
        {
            var res = await _stateContainer.LoadModlistMetadata();

            if (!res)
            {
                _errorLoadingModlists = true;
                _shouldRender = true;
                return;
            }
        }

        _gamesByName = Modlists
            .Select(x => x.Game)
            .Distinct()
            .ToDictionary(x => x.GetDescription(), x => x, StringComparer.OrdinalIgnoreCase);

        if (_galleryState.SelectedGame != GalleryState.All && !_gamesByName.ContainsKey(_galleryState.SelectedGame))
            _galleryState.SelectedGame = GalleryState.All;

        _shouldRender = true;
    }

    // DO NOT CHANGE "__builder"
    // ReSharper disable InconsistentNaming
    // ReSharper disable once UnusedParameter.Local
    private readonly RenderFragment<ModlistMetadata> _renderModlistInfo = modlist => __builder =>
    {
        var readme = modlist.Links.Readme;
        var viewLink = LinkUtils.CanRenderReadme(readme)
            ? ModlistInfo.CreateRedirect(modlist.Links.MachineURL)
            : readme;
        var archiveSearchLink = ModlistArchiveSearch.CreateRedirect(modlist.Links.MachineURL);

        <div>
            <img src="@modlist.Links.ImageUri"
                 alt="Image of the Modlist @modlist.Title"
                 loading="lazy"
                 crossorigin="anonymous"/>
            <div class="p-4">
                <p class="font-title font-semibold text-2xl">@modlist.Title</p>
                <p class="font-subtitle font-light text-lg">Created by @modlist.Author</p>
                <p class="mt-1 font-normal text-base">@modlist.Description</p>
                <p class="mt-2 font-medium text-md">Game: @modlist.Game.GetDescription()</p>

                <div class="flex flex-wrap gap-1">
                    <p class="font-medium text-md">Tags:</p>
                    @foreach (var tag in modlist.tags)
                    {
                        <p @key="tag" class="text-white bg-wabbajack-purple rounded-md px-2">@tag</p>
                    }
                </div>

                <div class="mt-4 flex flex-nowrap justify-between">
                    <a href="@archiveSearchLink" class="py-1 px-5 font-semibold rounded-lg shadow-md text-white bg-wabbajack-green">
                        Archive Search
                    </a>
                    <a href="@viewLink" class="py-1 px-5 font-semibold rounded-lg shadow-md text-white bg-wabbajack-green">
                        View
                    </a>
                </div>
            </div>
        </div>
    };

}
