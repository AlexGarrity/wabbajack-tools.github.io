@using Wabbajack.DTOs
@using Wabbajack.Web.Pages.ModlistInfo
@using Wabbajack.Web.Services
@using Wabbajack.Web.Utils
@inject IStateContainer StateContainer;

<div class="max-w-6xl mx-auto bg-black-900">

    <div class="overflow-hidden max-w-full relative">
        <div class="w-full bg-gray-900 relative">
            @if (_currentModlist != null)
            {
                <img class="w-full aspect-video"
                     loading="eager"
                     src="@_currentModlist.Links.ImageUri"
                     alt="Image of Modlist @_currentModlist.Title"/>

                <div class="absolute w-full bottom-0 bg-gray-900 bg-opacity-80 h-12 flex justify-center pt-1">
                    <a class="hover:underline flex gap-2" href="@ModlistInfo.CreateRedirect(_currentModlist.Links.MachineURL)">
                        <h3 class="text-md sm:text-2xl text-center font-semibold">@_currentModlist.Title</h3>
                        <p class="text-md sm:text-2xl text-center font-light">(@_currentModlist.Game.GetDescription())</p>
                    </a>
                </div>
            }
        </div>

        <div class="flex justify-between absolute top-1/2 w-full" style="transform: translateY(-50%)">
            <button @onclick="@(() => UpdateModlistPosition(false))"
                    class="rounded-full bg-wabbajack-green w-10 h-10 ml-3 text-lg font-semibold"
                    aria-label="Previous Modlist">&lt;</button>
            <button @onclick="@(() => UpdateModlistPosition(true))"
                    class="rounded-full bg-wabbajack-green w-10 h-10 mr-3 text-lg font-semibold"
                    aria-label="Next Modlist">&gt;</button>
        </div>
    </div>

</div>

@code {
    private bool _shouldRender;
    protected override bool ShouldRender() => _shouldRender;

    private List<ModlistMetadata> _filteredModlists;

    private int _currentModlistIndex = 0;
    private ModlistMetadata _currentModlist;

    private bool _errorLoadingModlists;

    protected override async Task OnInitializedAsync()
    {
        if (!StateContainer.Modlists.Any())
        {
            var res = await StateContainer.LoadModlistMetadata();

            if (!res)
            {
                _errorLoadingModlists = true;
                _shouldRender = true;
                return;
            }
        }

        if (StateContainer.Modlists.Any())
        {
            var filteredModlists = StateContainer.Modlists
                .Where(x => !x.NSFW)
                .OrderBy(_ => Guid.NewGuid())
                .ToList();

            //EnumerableUtils.ShuffleList(filteredModlists);
            _filteredModlists = filteredModlists;
            _currentModlist = _filteredModlists.First();
        }

        _shouldRender = true;
    }

    private void UpdateModlistPosition(bool isNext)
    {
        _shouldRender = false;

        if (isNext)
        {
            if (_currentModlistIndex == _filteredModlists.Count - 1)
                _currentModlistIndex = 0;
            else
                _currentModlistIndex++;
            _currentModlist = _filteredModlists[_currentModlistIndex];
        }
        else
        {
            if (_currentModlistIndex == 0)
                _currentModlistIndex = _filteredModlists.Count - 1;
            else
                _currentModlistIndex--;
            _currentModlist = _filteredModlists[_currentModlistIndex];
        }

        _shouldRender = true;
    }
}
